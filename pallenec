#!/usr/bin/env lua

local argparse = require "argparse"

local driver = require "pallene.driver"
local print_ir = require "pallene.print_ir"
local util = require "pallene.util"
local C = require "pallene.C"

--
-- Command-line options
--

local p = argparse("pallenec", "Pallene compiler")
p:argument("source_file", "File to compile")

-- What the compiler should output.
p:mutex(
    p:flag("--emit-c",    "Generate a .c file instead of an executable"),
    p:flag("--emit-lua",  "Generate a .lua file instead of an executable"),
    p:flag("--compile-c", "Compile a .c file generated by --emit-c"),
    p:flag("--print-ir",  "Show the intermediate representation for a program")
)

-- Optimization levels for the Pallene and C compiler. (-O0 disables optimizations for both)
-- NOTE: *For C compiler only* this option may be overridden  using the CFLAGS environment variable.
p:option("-O", "Optimization level")
    :args(1):convert(tonumber)
    :choices({"0", "1", "2", "3"})
    :default(2)

p:option("-o --output", "Output file path")


local args = p:parse()

local opt_level = args.O

-- For compilation errors that don't happen inside a source file.
-- Inspired by gcc, eg. "gcc: fatal error: no input files".
local compiler_name = arg[0]

local function compile(in_ext, out_ext)
    local ok, errs = driver.compile(compiler_name, opt_level, in_ext, out_ext, args.source_file,
        args.output)
    if not ok then util.abort(table.concat(errs, "\n")) end
end


local function compile_up_to(stop_after)
    local filename  = args.source_file
    local opt_level = args.O

    local input, err = driver.load_input(filename)
    if err then util.abort(err) end

    local out, errs = driver.compile_internal(filename, input, stop_after, opt_level)
    if not out then util.abort(table.concat(errs, "\n")) end

    return out
end

local function do_print_ir()
    local module = compile_up_to("optimize")
    io.stdout:write(print_ir(module))
end

if     args.emit_c      then compile("pln", "c")
elseif args.emit_lua    then compile("pln", "lua")
elseif args.compile_c   then compile("c" ,  "so")
elseif args.print_ir    then do_print_ir()
else --[[default]]           compile("pln", "so")
end
